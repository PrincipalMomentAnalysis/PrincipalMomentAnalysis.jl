var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference-1","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#","page":"Reference","title":"Reference","text":"pma\nPMA\nnormalizemean!\nnormalizemean\nnormalizemeanstd!\nnormalizemeanstd\ngroupsimplices\ntimeseriessimplices\nneighborsimplices\nneighborsimplices2","category":"page"},{"location":"reference/#PrincipalMomentAnalysis.pma","page":"Reference","title":"PrincipalMomentAnalysis.pma","text":"pma(A, G; nsv=6)\n\nComputes the Principal Moment Analysis of the matrix A (variables × samples) using the sample simplex graph G. Each column in G is a boolean vector representing one simplex. True means that a vertex is part of the simplex and false that it is not. Set nsv to control the number of singular values and vectors returned. Returns a PMA struct.\n\nSee also PMA.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.PMA","page":"Reference","title":"PrincipalMomentAnalysis.PMA","text":"PMA <: Factorization\n\nThe output of pma representing the Principal Moment Analysis factorization of a matrix A. If F::PMA is the factorization object, U, S, V and Vt can be obtained via F.U, F.S, F.V and F.Vt such as A ≈ U * Diagonal(S) * Vt'.\n\nSee also pma.\n\n\n\n\n\n","category":"type"},{"location":"reference/#PrincipalMomentAnalysis.normalizemean!","page":"Reference","title":"PrincipalMomentAnalysis.normalizemean!","text":"normalizemean!(A)\n\nIn place removal of the variable mean from the P×N matrix A where P is the number of variables and N is the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.normalizemean","page":"Reference","title":"PrincipalMomentAnalysis.normalizemean","text":"normalizemean(A)\n\nRemove the variable mean from the P×N matrix A where P is the number of variables and N is the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.normalizemeanstd!","page":"Reference","title":"PrincipalMomentAnalysis.normalizemeanstd!","text":"normalizemeanstd!(A)\n\nIn place normalization of variables to be mean zero and standard deviation one of the P×N matrix A where P is the number of variables and N is the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.normalizemeanstd","page":"Reference","title":"PrincipalMomentAnalysis.normalizemeanstd","text":"normalizemeanstd!(A)\n\nNormalize variables to be mean zero and standard deviation one in the P×N matrix A where P is the number of variables and N is the number of samples.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.groupsimplices","page":"Reference","title":"PrincipalMomentAnalysis.groupsimplices","text":"groupsimplices(groupby::AbstractVector)\n\nCreate simplex graph connecting elements with identical values in the groupby vector.\n\nExamples\n\njulia> G = groupsimplices([\"A\",\"A\",\"B\",\"C\",\"B\"])\n5×5 BitArray{2}:\n 1  1  0  0  0\n 1  1  0  0  0\n 0  0  1  0  1\n 0  0  0  1  0\n 0  0  1  0  1\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.timeseriessimplices","page":"Reference","title":"PrincipalMomentAnalysis.timeseriessimplices","text":"timeseriessimplices(time::AbstractVector; groupby::AbstractVector)\n\nCreate simplex graph connecting elements adjacent in time. In case of ties, All elements at a unique timepoint will be connected to the all elements at the previous, current and next timepoints. If groupby is specified, the elements are first divided by group, and then connected by time.\n\nExamples\n\njulia> G = timeseriessimplices([0.5, 1.0, 4.0])\n3×3 BitArray{2}:\n 1  1  0\n 1  1  1\n 0  1  1\n\njulia> G = timeseriessimplices([0.5, 1.0, 1.0, 4.0])\n4×4 BitArray{2}:\n 1  1  1  0\n 1  1  1  1\n 1  1  1  1\n 0  1  1  1\n\njulia> G = timeseriessimplices([2, 4, 6, 2, 4, 8]; groupby=[\"A\",\"A\",\"A\",\"B\",\"B\",\"B\"])\n6×6 BitArray{2}:\n 1  1  0  0  0  0\n 1  1  1  0  0  0\n 0  1  1  0  0  0\n 0  0  0  1  1  0\n 0  0  0  1  1  1\n 0  0  0  0  1  1\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.neighborsimplices","page":"Reference","title":"PrincipalMomentAnalysis.neighborsimplices","text":"neighborsimplices(A::AbstractMatrix; k, r, dim, symmetric, normalizedist, groupby)\n\nCreate simplex graph connecting nearest neighbor samples.\n\nInputs\n\nA: Data matrix (variables × samples).\nk: Number of nearest neighbors to connect. Default: 0.\nr: Connected all neighbors with disctance ≤r. Default: 0.0.\ndim: Reduce the dimension to dim before computing distances. Useful to reduce noise. Default: Disabled.\nsymmetric: Make the simplex graph symmetric. Default: false.\nnormalizedist: Normalize distances to the scale [0.0,1.0]. Affects the r parameter. Default: true.\ngroupby: Only connected samples within the specified groups. Default: Disabled.\n\nExamples\n\njulia> G = neighborsimplices([0 0 2 2; 0 1 1 0]; k=1)\n4×4 BitArray{2}:\n 1  1  0  0\n 1  1  0  0\n 0  0  1  1\n 0  0  1  1\n\njulia> G = neighborsimplices([0 0 2 2; 0 1 1 0]; r=0.9)\n4×4 BitArray{2}:\n 1  1  0  1\n 1  1  1  0\n 0  1  1  1\n 1  0  1  1\n\n\n\n\n\n","category":"function"},{"location":"reference/#PrincipalMomentAnalysis.neighborsimplices2","page":"Reference","title":"PrincipalMomentAnalysis.neighborsimplices2","text":"neighborsimplices2(D2; k, r, symmetric, normalizedist, groupby)\n\nCreate simplex graph connecting nearest neighbors in given symmetric matrix where element i,j equals the squared distance between samples i and j.\n\nInputs\n\nD2: Matrix of squared distances.\nk: Number of nearest neighbors to connect. Default: 0.\nr: Connected all neighbors with disctance ≤r. Default: 0.0.\nsymmetric: Make the simplex graph symmetric. Default: false.\nnormalizedist: Normalize distances to the scale [0.0,1.0]. Affects the r parameter. Default: true.\ngroupby: Only connected samples within the specified groups. Default: Disabled.\n\n\n\n\n\n","category":"function"},{"location":"#PrincipalMomentAnalysis.jl-1","page":"Home","title":"PrincipalMomentAnalysis.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"PrincipalMomentAnalysis.jl provides an implementation of Principal Moment Analysis (PMA) as described in link (coming soon). If you want to cite this work, please use:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Fontes, M. & Henningsson, R. (2020). Principal Moment Analysis. TBA, 000000.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Corresponding author: Magnus Fontes (fontes.magnus@gene.com)\nJulia implementation: Rasmus Henningsson (rasmus.henningsson@med.lu.se)","category":"page"},{"location":"tutorial/#Tutorial-1","page":"Tutorial","title":"Tutorial","text":"","category":"section"}]
}
